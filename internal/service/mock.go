// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"git.ssns.se/git/frozendragon/bridge-crosser-scala/internal/model"
	"sync"
)

// Ensure, that InterfacesMock does implement Interfaces.
// If this is not the case, regenerate this file with moq.
var _ Interfaces = &InterfacesMock{}

// InterfacesMock is a mock implementation of Interfaces.
//
//	func TestSomethingThatUsesInterfaces(t *testing.T) {
//
//		// make and configure a mocked Interfaces
//		mockedInterfaces := &InterfacesMock{
//			CalculateCrossingFunc: func(request model.CrossingRequest) model.CrossingResponse {
//				panic("mock out the CalculateCrossing method")
//			},
//		}
//
//		// use mockedInterfaces in code that requires Interfaces
//		// and then make assertions.
//
//	}
type InterfacesMock struct {
	// CalculateCrossingFunc mocks the CalculateCrossing method.
	CalculateCrossingFunc func(request model.CrossingRequest) model.CrossingResponse

	// calls tracks calls to the methods.
	calls struct {
		// CalculateCrossing holds details about calls to the CalculateCrossing method.
		CalculateCrossing []struct {
			// Request is the request argument value.
			Request model.CrossingRequest
		}
	}
	lockCalculateCrossing sync.RWMutex
}

// CalculateCrossing calls CalculateCrossingFunc.
func (mock *InterfacesMock) CalculateCrossing(request model.CrossingRequest) model.CrossingResponse {
	if mock.CalculateCrossingFunc == nil {
		panic("InterfacesMock.CalculateCrossingFunc: method is nil but Interfaces.CalculateCrossing was just called")
	}
	callInfo := struct {
		Request model.CrossingRequest
	}{
		Request: request,
	}
	mock.lockCalculateCrossing.Lock()
	mock.calls.CalculateCrossing = append(mock.calls.CalculateCrossing, callInfo)
	mock.lockCalculateCrossing.Unlock()
	return mock.CalculateCrossingFunc(request)
}

// CalculateCrossingCalls gets all the calls that were made to CalculateCrossing.
// Check the length with:
//
//	len(mockedInterfaces.CalculateCrossingCalls())
func (mock *InterfacesMock) CalculateCrossingCalls() []struct {
	Request model.CrossingRequest
} {
	var calls []struct {
		Request model.CrossingRequest
	}
	mock.lockCalculateCrossing.RLock()
	calls = mock.calls.CalculateCrossing
	mock.lockCalculateCrossing.RUnlock()
	return calls
}
