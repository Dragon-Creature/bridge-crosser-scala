// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rest

import (
	"net/http"
	"sync"
)

// Ensure, that InterfacesMock does implement Interfaces.
// If this is not the case, regenerate this file with moq.
var _ Interfaces = &InterfacesMock{}

// InterfacesMock is a mock implementation of Interfaces.
//
//	func TestSomethingThatUsesInterfaces(t *testing.T) {
//
//		// make and configure a mocked Interfaces
//		mockedInterfaces := &InterfacesMock{
//			PostCalculateCrossingFunc: func(w http.ResponseWriter, r *http.Request)  {
//				panic("mock out the PostCalculateCrossing method")
//			},
//		}
//
//		// use mockedInterfaces in code that requires Interfaces
//		// and then make assertions.
//
//	}
type InterfacesMock struct {
	// PostCalculateCrossingFunc mocks the PostCalculateCrossing method.
	PostCalculateCrossingFunc func(w http.ResponseWriter, r *http.Request)

	// calls tracks calls to the methods.
	calls struct {
		// PostCalculateCrossing holds details about calls to the PostCalculateCrossing method.
		PostCalculateCrossing []struct {
			// W is the w argument value.
			W http.ResponseWriter
			// R is the r argument value.
			R *http.Request
		}
	}
	lockPostCalculateCrossing sync.RWMutex
}

// PostCalculateCrossing calls PostCalculateCrossingFunc.
func (mock *InterfacesMock) PostCalculateCrossing(w http.ResponseWriter, r *http.Request) {
	if mock.PostCalculateCrossingFunc == nil {
		panic("InterfacesMock.PostCalculateCrossingFunc: method is nil but Interfaces.PostCalculateCrossing was just called")
	}
	callInfo := struct {
		W http.ResponseWriter
		R *http.Request
	}{
		W: w,
		R: r,
	}
	mock.lockPostCalculateCrossing.Lock()
	mock.calls.PostCalculateCrossing = append(mock.calls.PostCalculateCrossing, callInfo)
	mock.lockPostCalculateCrossing.Unlock()
	mock.PostCalculateCrossingFunc(w, r)
}

// PostCalculateCrossingCalls gets all the calls that were made to PostCalculateCrossing.
// Check the length with:
//
//	len(mockedInterfaces.PostCalculateCrossingCalls())
func (mock *InterfacesMock) PostCalculateCrossingCalls() []struct {
	W http.ResponseWriter
	R *http.Request
} {
	var calls []struct {
		W http.ResponseWriter
		R *http.Request
	}
	mock.lockPostCalculateCrossing.RLock()
	calls = mock.calls.PostCalculateCrossing
	mock.lockPostCalculateCrossing.RUnlock()
	return calls
}
